---
title: "Seminário de Séries Temporais"
format: html
editor: visual
---

```{r, include=F}
libraries <- c("dplyr", "ggplot2", "patchwork", "quantmod", "plotly", "lubridate", "reshape2", "tensorflow", "keras")

load_libraries <- function(lib_list) {
  invisible(lapply(lib_list, function(x) suppressWarnings(require(x, character.only = TRUE))))
}

load_libraries(libraries)

```


## Banco de dados

O conjunto de dados utilizado para a análise das stock prices da NVIDIA contém registros diários que representam o desempenho financeiro da empresa no mercado de ações.

O banco de dados foi extraído de: https://finance.yahoo.com/quote/NVDA/history/.

As variáveis incluídas são:

- Date: Representa a data de cada registro.

- Close.Last: Indica o preço de fechamento das ações da NVIDIA ao final de cada dia de negociação. 

- Volume: Refere-se ao número total de ações negociadas em um determinado dia. 

- Open: Representa o preço de abertura das ações no início de cada dia de negociação.

- High: Mostra o preço mais alto atingido pelas ações durante o dia.

- Low: Indica o preço mais baixo que as ações atingiram durante o dia. 

Com isso, será feito um estudo para identificar as tendências, padrões sazonais, e a previsão dos preços das ações da NVIDIA. 

```{r}
df = read.csv("./data/historical_data.csv")

df <- df %>%
  mutate(
    Close.Last = as.numeric(gsub("\\$", "", Close.Last)),
    Open = as.numeric(gsub("\\$", "", Open)),
    High = as.numeric(gsub("\\$", "", High)),
    Low = as.numeric(gsub("\\$", "", Low))
)

df <- df %>%
  mutate(Date = as.Date(Date, format = "%m/%d/%Y"))

head(df)
summary(df)
```

Vemos que o minimo da ação já esteve abaixo de zero e o máximo acima de 100, o que é interessante, pois apresenta uma variação alta nos anos.

## Análise exploratória de dados

#### Análise dos preços

```{r}
fig <- plot_ly(df, x = ~Date) %>%
  add_lines(y = ~Open, name = 'Abertura', visible = TRUE, line = list(color = 'orange')) %>%
  add_lines(y = ~High, name = 'Alta', visible = TRUE, line = list(color = 'green')) %>%
  add_lines(y = ~Low, name = 'Baixa', visible = TRUE, line = list(color = 'red')) %>%
  add_lines(y = ~Close.Last, name = 'Fechamento', visible = TRUE, line = list(color = 'blue')) %>%
  layout(
    title = "Stock prices da NVIDIA",
    xaxis = list(title = "Data"),
    yaxis = list(title = "Preço"),
    updatemenus = list(
      list(
        y = -0.2, 
        x = 0.5,  
        xanchor = 'center',
        yanchor = 'top',
        direction = 'up',
        buttons = list(
          list(method = "restyle", args = list("visible", list(TRUE, TRUE, TRUE, TRUE)),
               label = "Todas"),
          list(method = "restyle", args = list("visible", list(TRUE, FALSE, FALSE, FALSE)),
               label = "Abertura"),
          list(method = "restyle", args = list("visible", list(FALSE, TRUE, FALSE, FALSE)),
               label = "Alta"),
          list(method = "restyle", args = list("visible", list(FALSE, FALSE, TRUE, FALSE)),
               label = "Baixa"),
          list(method = "restyle", args = list("visible", list(FALSE, FALSE, FALSE, TRUE)),
               label = "Fechamento")
        )
      )
    ),
    margin = list(l = 50, r = 50, b = 100, t = 50, pad = 4)
  )

fig
```


#### Volume de negociação 

```{r}
p1 <- plot_ly(df, x = ~Date, y = ~Close.Last, type = 'scatter', mode = 'lines', name = 'Close.Last',
              line = list(color = 'blue')) %>%
  layout(yaxis = list(title = "Close.Last"))

p2 <- plot_ly(df, x = ~Date, y = ~Volume, type = 'bar', name = 'Volume',
              marker = list(color = 'orange')) %>%
  layout(yaxis = list(title = "Volume"))

combined_plot <- subplot(p1, p2, nrows = 2, shareX = TRUE, titleX = TRUE, titleY = TRUE)

combined_plot
```


Vemos que a ação começa a ter um volume alto de transções quando ela começa a ter um valor maior, como visto entre os anos de 2016 e 2018.

#### Histograma dos preços

```{r}
(
ggplot(df, aes(x = Low)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Baixa do dia",
       x = "Baixa", y = "Frequência") +
  theme_bw() 
|
ggplot(df, aes(x = Open)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Abertura do dia",
       x = "Abertura", y = "Frequência") +
  theme_bw() 
) /
(
ggplot(df, aes(x = High)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Alta do dia",
       x = "Alta", y = "Frequência") +
  theme_bw() 
|
ggplot(df, aes(x = Close.Last)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Fechamento do dia",
       x = "Fechamento", y = "Frequência") +
  theme_bw() 
)
```

Para as quatro variáveis de preço, as distruições são assimétricas positivas. É observado alguns outliers, explicados pela alta que houve nos anos últimos anos.

#### Gráficos de diferenças

```{r}
df = df %>% 
  mutate(diff = (Close.Last - Open))

(
df %>%
  ggplot(aes(y = diff, x = Date)) +
  geom_line() +
  labs(title = "Gráfico de diferença entre o fechamento e abertura",
       x = "Data",
       y = "Diferença no Fechamento") +
  annotate("text", x = max(df$Date), y = mean(df$diff), 
           label = paste("Média:", round(mean(df$diff), 3)), 
           hjust = 7, vjust = -12, color = "black") +
  theme_bw()
)
```

É verificado uma alta volatilidade nos últimos anos da série. Isso é interpretado, pois há datas com diferenças maiores de 5, tanto para o negativo quanto para o positivo. Por fim, é verificado a média das diferenças, ela se aproxima de zero, o que é o esperado, pois se tivessemos uma média de diferenças positivas, faria sentido comprar na abertura e vender no fechamento, e se a média fosse negativa, não faria sentido comprar na abertura e vender no fechamento, pois o valor do fechamento seria em média menor do que o valor da abertura.

#### Gráfico de Decomposição da série temporal

```{r}
df_sorted <- df[order(df$Date, decreasing = FALSE), ]

start_year <- as.numeric(format(min(df$Date), "%Y"))
start_doy <- as.numeric(format(min(df$Date), "%j")) 
frequency <- 252

ts_open <- ts(df_sorted$Open, start = c(start_year, start_doy), frequency = frequency)
ts_open %>% 
  decompose() %>%
  plot()
```

Vemos uma sazonalidade. Além disso vemos que a tendência (`trend`) é crescente. Também vemos que nos últimos anos houve uma maior variabilidade da série, concluímos isso a partir do gráfico `random`.

#### Heatmap com as médias por ano, agrupado por mês

```{r}
df_heatmap <- df %>%
  mutate(Year = format(Date, "%Y"),
         Month = month(as.POSIXlt(Date, format="%d/%m/%Y")))

data_summary <- df_heatmap %>%
  group_by(Year,Month) %>%
  summarise(Average_Close = mean(Open, na.rm = TRUE), .groups = "drop") %>%
  ungroup()

ggplot(data_summary, aes(x = Year, y = Month, fill = Average_Close)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "yellow", high = "red") +
  labs(title = "Heatmap das médias agrupadas por mês e ano",
       x = "Ano",
       y = "Mês",
       fill = "Preço Médio de abertura") +
  theme_bw()
```

Aqui temos outra maneira de interpretar o gráfico (Preço x Data) da série temporal. Esse gráfico mostra uma maneira agrupada em mês e ano, foi calculado a média dos meses para cada ano e plotado no gráfico, vemos claramente que no último ano (2024), tivemos um aumento muito alto da média, enquanto que entre o mês 6 de 2021 até o mês 11 de 2023, vemos um aumento gradual da média do preço de abertura.

#### Verificando a correlação da série

```{r}
df %>% 
  select(-c(Date, diff)) %>%
    cor() %>%
      melt() %>% 
      ggplot(aes(x=Var1, y=Var2, fill=value)) + 
        geom_tile() +
        scale_fill_gradient2(low = "purple", high = "skyblue", mid = "white", 
          midpoint = 0, limit = c(-1,1), space = "Lab", 
          name="Pearson\nCorrelation") +
        theme_bw() + 
        theme(axis.text.x = element_text(angle = 45, vjust = 1, 
          size = 12, hjust = 1)) +
        coord_fixed()
```

Vemos uma forte correlação das variáveis de preço (o que é esperado). E uma correlação zero do Volume com as variáveis de preço.

```{r}
df_wo_diff <- df %>% select(-c(diff))
test = df_wo_diff %>% filter(Date >= "2024-01-01")
train = df_wo_diff %>% filter(Date < "2024-01-01")

cat(
    paste("Test dataset size: ", test %>% dim() %>% first),
    paste("Train dataset size: ", train %>% dim()%>% first),
    paste("Porcentagem do banco: ", 
          (test %>% dim() %>% first/(test %>% dim() %>% first + train %>% dim()%>% first )) %>% 
            round(digits = 4),
          "%"
          ),
    sep = "\n"
)

write.csv(train, file = "./data/train.csv", row.names = FALSE)
write.csv(test, file = "./data/test.csv", row.names = FALSE)

df %>% 
  select(c(Date, Close.Last)) %>%
  write.csv(file = "./data/time-series.csv", row.names = FALSE)
```

```{r}

```




